# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Notification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, subject: str=None, message: str=None, _from: str=None, mail_recipients: List[str]=None, sms_recipients: List[str]=None, timestamp: int=None):  # noqa: E501
        """Notification - a model defined in Swagger

        :param subject: The subject of this Notification.  # noqa: E501
        :type subject: str
        :param message: The message of this Notification.  # noqa: E501
        :type message: str
        :param _from: The _from of this Notification.  # noqa: E501
        :type _from: str
        :param mail_recipients: The mail_recipients of this Notification.  # noqa: E501
        :type mail_recipients: List[str]
        :param sms_recipients: The sms_recipients of this Notification.  # noqa: E501
        :type sms_recipients: List[str]
        :param timestamp: The timestamp of this Notification.  # noqa: E501
        :type timestamp: int
        """
        self.swagger_types = {
            'subject': str,
            'message': str,
            '_from': str,
            'mail_recipients': List[str],
            'sms_recipients': List[str],
            'timestamp': int
        }

        self.attribute_map = {
            'subject': 'subject',
            'message': 'message',
            '_from': 'from',
            'mail_recipients': 'mailRecipients',
            'sms_recipients': 'smsRecipients',
            'timestamp': 'timestamp'
        }

        self._subject = subject
        self._message = message
        self.__from = _from
        self._mail_recipients = mail_recipients
        self._sms_recipients = sms_recipients
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Notification of this Notification.  # noqa: E501
        :rtype: Notification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self) -> str:
        """Gets the subject of this Notification.


        :return: The subject of this Notification.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this Notification.


        :param subject: The subject of this Notification.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message(self) -> str:
        """Gets the message of this Notification.


        :return: The message of this Notification.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Notification.


        :param message: The message of this Notification.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def _from(self) -> str:
        """Gets the _from of this Notification.


        :return: The _from of this Notification.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Notification.


        :param _from: The _from of this Notification.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def mail_recipients(self) -> List[str]:
        """Gets the mail_recipients of this Notification.


        :return: The mail_recipients of this Notification.
        :rtype: List[str]
        """
        return self._mail_recipients

    @mail_recipients.setter
    def mail_recipients(self, mail_recipients: List[str]):
        """Sets the mail_recipients of this Notification.


        :param mail_recipients: The mail_recipients of this Notification.
        :type mail_recipients: List[str]
        """
        if mail_recipients is None:
            raise ValueError("Invalid value for `mail_recipients`, must not be `None`")  # noqa: E501

        self._mail_recipients = mail_recipients

    @property
    def sms_recipients(self) -> List[str]:
        """Gets the sms_recipients of this Notification.


        :return: The sms_recipients of this Notification.
        :rtype: List[str]
        """
        return self._sms_recipients

    @sms_recipients.setter
    def sms_recipients(self, sms_recipients: List[str]):
        """Sets the sms_recipients of this Notification.


        :param sms_recipients: The sms_recipients of this Notification.
        :type sms_recipients: List[str]
        """
        if sms_recipients is None:
            raise ValueError("Invalid value for `sms_recipients`, must not be `None`")  # noqa: E501

        self._sms_recipients = sms_recipients

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Notification.

        This parameter is optional and is for scheduling an e-mail in the future  # noqa: E501

        :return: The timestamp of this Notification.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Notification.

        This parameter is optional and is for scheduling an e-mail in the future  # noqa: E501

        :param timestamp: The timestamp of this Notification.
        :type timestamp: int
        """

        self._timestamp = timestamp
